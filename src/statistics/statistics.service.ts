import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThanOrEqual } from 'typeorm';
import { Statistic } from './statistic.entity';

@Injectable()
export class StatisticsService {
  constructor(
    @InjectRepository(Statistic)
    private statisticsRepo: Repository<Statistic>,
  ) {}

  async createStatistic(userId: string, type: string, data: any) {
    const stat = this.statisticsRepo.create({ userId, type, data });
    return this.statisticsRepo.save(stat);
  }

  async getStatisticsForUser(userId: string) {
    return this.statisticsRepo.find({ where: { userId } });
  }

  async getAllStatistics() {
    return this.statisticsRepo.find();
  }

  // ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  async getCompletedLessonsCount(studentId: string): Promise<number> {
    try {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ lesson-service
      const response = await fetch(`http://localhost:3004/lessons/completed/count/${studentId}`);
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:', response.status);
        return 0;
      }
      const data = await response.json();
      return data.count || 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ lesson-service:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π (–¥–Ω–µ–π –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞—Ö–æ–¥–∏–ª –≤ —Å–∏—Å—Ç–µ–º—É)
   */
  async getActiveDaysCount(userId: string): Promise<number> {
    try {
      console.log(`üìä [DEBUG] –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∏–ø–æ–º 'login'
      const loginStats = await this.statisticsRepo.find({
        where: { userId, type: 'login' },
        order: { createdAt: 'DESC' }
      });

      console.log(`üìä [DEBUG] –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∏–Ω–æ–≤: ${loginStats.length}`);
      console.log(`üìä [DEBUG] –ó–∞–ø–∏—Å–∏ –ª–æ–≥–∏–Ω–æ–≤:`, loginStats.map(s => ({ 
        createdAt: s.createdAt.toISOString(), 
        date: s.createdAt.toISOString().split('T')[0]
      })));

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –≤—Ö–æ–¥–∞
      const uniqueDays = new Set();
      loginStats.forEach(stat => {
        const dateOnly = stat.createdAt.toISOString().split('T')[0];
        uniqueDays.add(dateOnly);
      });

      console.log(`üìä [DEBUG] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏:`, Array.from(uniqueDays));
      console.log(`üìä [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${uniqueDays.size}`);

      return uniqueDays.size;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  async getLearnedWordsCount(userId: string): Promise<number> {
    try {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ vocabulary-service
      const response = await fetch(`http://localhost:3000/lexicon/learned/count/${userId}`);
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:', response.status);
        return 0;
      }
      const data = await response.json();
      return data.count || 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ vocabulary-service:', error);
      return 0;
    }
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async recordUserLogin(userId: string): Promise<void> {
    try {
      console.log(`üìä [DEBUG] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      const result = await this.createStatistic(userId, 'login', {
        action: 'user_login',
        timestamp: new Date().toISOString()
      });
      
      console.log(`üìä [DEBUG] –í—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ:`, result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  async getStudentDashboardStats(studentId: string) {
    const [completedLessons, activeDays, learnedWords] = await Promise.all([
      this.getCompletedLessonsCount(studentId),
      this.getActiveDaysCount(studentId),
      this.getLearnedWordsCount(studentId)
    ]);

    return {
      lessonsCompleted: completedLessons,
      daysActive: activeDays,
      wordsLearned: learnedWords
    };
  }

  // ==================== ADMIN STATISTICS ====================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
   */
  async getUserRegistrationStats(month?: string) {
    try {
      const currentDate = month ? new Date(month + '-01') : new Date();
      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å ${startOfMonth.toISOString()} –ø–æ ${endOfMonth.toISOString()}`);

      // –ó–∞–ø—Ä–æ—Å –∫ auth-service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const response = await fetch(`http://localhost:3001/auth/users/stats?startDate=${startOfMonth.toISOString()}&endDate=${endOfMonth.toISOString()}`);
      
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response.status);
        return { newStudents: 0, newTeachers: 0, totalNew: 0 };
      }

      const data = await response.json();
      return {
        newStudents: data.newStudents || 0,
        newTeachers: data.newTeachers || 0, 
        totalNew: (data.newStudents || 0) + (data.newTeachers || 0),
        month: month || currentDate.toISOString().slice(0, 7)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ auth-service:', error);
      return { newStudents: 0, newTeachers: 0, totalNew: 0 };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
   */
  async getLessonsStats(month?: string) {
    try {
      const currentDate = month ? new Date(month + '-01') : new Date();
      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤ —Å ${startOfMonth.toISOString()} –ø–æ ${endOfMonth.toISOString()}`);

      // –ó–∞–ø—Ä–æ—Å –∫ lesson-service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤
      const response = await fetch(`http://localhost:3004/lessons/stats?startDate=${startOfMonth.toISOString()}&endDate=${endOfMonth.toISOString()}`);
      
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤:', response.status);
        return { totalLessons: 0, completedLessons: 0, cancelledLessons: 0 };
      }

      const data = await response.json();
      return {
        totalLessons: data.totalLessons || 0,
        completedLessons: data.completedLessons || 0,
        cancelledLessons: data.cancelledLessons || 0,
        month: month || currentDate.toISOString().slice(0, 7)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ lesson-service:', error);
      return { totalLessons: 0, completedLessons: 0, cancelledLessons: 0 };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  async getPlatformStats() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const [userStats, lessonStats] = await Promise.all([
        this.getUserRegistrationStats(),
        this.getLessonsStats()
      ]);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ–≤–∞—Ä—é
      const vocabResponse = await fetch('http://localhost:3000/translation/stats');
      const vocabData = vocabResponse.ok ? await vocabResponse.json() : [];

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
      const topLanguagePairs = vocabData.slice(0, 3).map((item: any) => ({
        pair: `${item.source} ‚Üí ${item.target}`,
        count: item.count
      }));

      return {
        monthlyUserGrowth: userStats.totalNew,
        monthlyLessons: lessonStats.totalLessons,
        topLanguagePairs,
        platformActivity: {
          activeUsers: await this.getActiveUsersCount(),
          totalLogins: await this.getTotalLoginsThisMonth()
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', error);
      return {
        monthlyUserGrowth: 0,
        monthlyLessons: 0,
        topLanguagePairs: [],
        platformActivity: { activeUsers: 0, totalLogins: 0 }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
   */
  private async getActiveUsersCount(): Promise<number> {
    const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);
    
    const loginStats = await this.statisticsRepo.find({
      where: { type: 'login' },
      order: { createdAt: 'DESC' }
    });

    // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const uniqueUsers = new Set();
    loginStats.forEach(stat => {
      if (stat.createdAt >= startOfMonth) {
        uniqueUsers.add(stat.userId);
      }
    });

    return uniqueUsers.size;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
   */
  private async getTotalLoginsThisMonth(): Promise<number> {
    const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);
    
    const count = await this.statisticsRepo.count({
      where: { 
        type: 'login',
        createdAt: MoreThanOrEqual(startOfMonth)
      }
    });

    return count;
  }
} 
